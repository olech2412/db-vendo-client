/*
 * db-vendo-client
 * Schema for db-vendo-client/hafas-rest-api's Friendly Public Transport Format REST API
 *
 * The version of the OpenAPI document: 6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.olech2412.dbvendowrapper.model;

import com.fasterxml.jackson.annotation.*;

import java.util.*;

/**
 * A journey is a computed set of directions to get from A to B at a specific time. It would typically be the result of a route planning algorithm.
 */
@JsonPropertyOrder({
        Journey.JSON_PROPERTY_TYPE,
        Journey.JSON_PROPERTY_LEGS,
        Journey.JSON_PROPERTY_REFRESH_TOKEN,
        Journey.JSON_PROPERTY_REMARKS,
        Journey.JSON_PROPERTY_PRICE,
        Journey.JSON_PROPERTY_CYCLE,
        Journey.JSON_PROPERTY_SCHEDULED_DAYS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T16:58:48.518685525+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Journey {
    public static final String JSON_PROPERTY_TYPE = "type";
    public static final String JSON_PROPERTY_LEGS = "legs";
    public static final String JSON_PROPERTY_REFRESH_TOKEN = "refreshToken";
    public static final String JSON_PROPERTY_REMARKS = "remarks";
    public static final String JSON_PROPERTY_PRICE = "price";
    public static final String JSON_PROPERTY_CYCLE = "cycle";
    public static final String JSON_PROPERTY_SCHEDULED_DAYS = "scheduledDays";
    @jakarta.annotation.Nullable
    private TypeEnum type;
    @jakarta.annotation.Nullable
    private List<Leg> legs = new ArrayList<>();
    @jakarta.annotation.Nullable
    private String refreshToken;
    @jakarta.annotation.Nullable
    private List<StopOverRemarksInner> remarks = new ArrayList<>();
    @jakarta.annotation.Nullable
    private Price price;
    @jakarta.annotation.Nullable
    private Cycle cycle;
    @jakarta.annotation.Nullable
    private Map<String, Boolean> scheduledDays = new HashMap<>();
    public Journey() {
    }

    public Journey type(@jakarta.annotation.Nullable TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(@jakarta.annotation.Nullable TypeEnum type) {
        this.type = type;
    }

    public Journey legs(@jakarta.annotation.Nullable List<Leg> legs) {

        this.legs = legs;
        return this;
    }

    public Journey addLegsItem(Leg legsItem) {
        if (this.legs == null) {
            this.legs = new ArrayList<>();
        }
        this.legs.add(legsItem);
        return this;
    }

    /**
     * Get legs
     *
     * @return legs
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LEGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Leg> getLegs() {
        return legs;
    }

    @JsonProperty(JSON_PROPERTY_LEGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLegs(@jakarta.annotation.Nullable List<Leg> legs) {
        this.legs = legs;
    }

    public Journey refreshToken(@jakarta.annotation.Nullable String refreshToken) {

        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Get refreshToken
     *
     * @return refreshToken
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getRefreshToken() {
        return refreshToken;
    }

    @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRefreshToken(@jakarta.annotation.Nullable String refreshToken) {
        this.refreshToken = refreshToken;
    }

    public Journey remarks(@jakarta.annotation.Nullable List<StopOverRemarksInner> remarks) {

        this.remarks = remarks;
        return this;
    }

    public Journey addRemarksItem(StopOverRemarksInner remarksItem) {
        if (this.remarks == null) {
            this.remarks = new ArrayList<>();
        }
        this.remarks.add(remarksItem);
        return this;
    }

    /**
     * Get remarks
     *
     * @return remarks
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REMARKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<StopOverRemarksInner> getRemarks() {
        return remarks;
    }

    @JsonProperty(JSON_PROPERTY_REMARKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRemarks(@jakarta.annotation.Nullable List<StopOverRemarksInner> remarks) {
        this.remarks = remarks;
    }

    public Journey price(@jakarta.annotation.Nullable Price price) {

        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Price getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrice(@jakarta.annotation.Nullable Price price) {
        this.price = price;
    }

    public Journey cycle(@jakarta.annotation.Nullable Cycle cycle) {

        this.cycle = cycle;
        return this;
    }

    /**
     * Get cycle
     *
     * @return cycle
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CYCLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Cycle getCycle() {
        return cycle;
    }

    @JsonProperty(JSON_PROPERTY_CYCLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCycle(@jakarta.annotation.Nullable Cycle cycle) {
        this.cycle = cycle;
    }

    public Journey scheduledDays(@jakarta.annotation.Nullable Map<String, Boolean> scheduledDays) {

        this.scheduledDays = scheduledDays;
        return this;
    }

    public Journey putScheduledDaysItem(String key, Boolean scheduledDaysItem) {
        if (this.scheduledDays == null) {
            this.scheduledDays = new HashMap<>();
        }
        this.scheduledDays.put(key, scheduledDaysItem);
        return this;
    }

    /**
     * Get scheduledDays
     *
     * @return scheduledDays
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SCHEDULED_DAYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Map<String, Boolean> getScheduledDays() {
        return scheduledDays;
    }

    @JsonProperty(JSON_PROPERTY_SCHEDULED_DAYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScheduledDays(@jakarta.annotation.Nullable Map<String, Boolean> scheduledDays) {
        this.scheduledDays = scheduledDays;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Journey journey = (Journey) o;
        return Objects.equals(this.type, journey.type) &&
                Objects.equals(this.legs, journey.legs) &&
                Objects.equals(this.refreshToken, journey.refreshToken) &&
                Objects.equals(this.remarks, journey.remarks) &&
                Objects.equals(this.price, journey.price) &&
                Objects.equals(this.cycle, journey.cycle) &&
                Objects.equals(this.scheduledDays, journey.scheduledDays);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, legs, refreshToken, remarks, price, cycle, scheduledDays);
    }

    @Override
    public String toString() {
        String sb = "class Journey {\n" +
                "    type: " + toIndentedString(type) + "\n" +
                "    legs: " + toIndentedString(legs) + "\n" +
                "    refreshToken: " + toIndentedString(refreshToken) + "\n" +
                "    remarks: " + toIndentedString(remarks) + "\n" +
                "    price: " + toIndentedString(price) + "\n" +
                "    cycle: " + toIndentedString(cycle) + "\n" +
                "    scheduledDays: " + toIndentedString(scheduledDays) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets type
     */
    public enum TypeEnum {
        JOURNEY("journey");

        private final String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

