/*
 * db-vendo-client
 * Schema for db-vendo-client/hafas-rest-api's Friendly Public Transport Format REST API
 *
 * OpenAPI spec version: 6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.olech2412.dbvendoclient.api;

import java.math.BigDecimal;
import de.olech2412.dbvendoclient.model.InlineResponse2XX;
import de.olech2412.dbvendoclient.model.InlineResponse2XX1;
import de.olech2412.dbvendoclient.model.InlineResponse2XX2;
import de.olech2412.dbvendoclient.model.InlineResponse2XX3;
import de.olech2412.dbvendoclient.model.InlineResponse2XX4;
import de.olech2412.dbvendoclient.model.InlineResponse2XX5;
import de.olech2412.dbvendoclient.model.Location;
import java.time.OffsetDateTime;
import de.olech2412.dbvendoclient.model.ProfileSpecificProducts;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Finds journeys from A to B.
     *
     * Uses [&#x60;hafasClient.journeys()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/journeys.md) to **find journeys from A (&#x60;from&#x60;) to B (&#x60;to&#x60;)**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void journeysGetTest() {
        String from = null;
        String fromId = null;
        String fromAddress = null;
        BigDecimal fromLatitude = null;
        BigDecimal fromLongitude = null;
        String to = null;
        String toId = null;
        String toAddress = null;
        BigDecimal toLatitude = null;
        BigDecimal toLongitude = null;
        OffsetDateTime departure = null;
        OffsetDateTime arrival = null;
        String earlierThan = null;
        String laterThan = null;
        Integer results = null;
        Boolean stopovers = null;
        Integer transfers = null;
        Integer transferTime = null;
        String accessibility = null;
        Boolean bike = null;
        Boolean startWithWalking = null;
        String walkingSpeed = null;
        Boolean tickets = null;
        Boolean polylines = null;
        Boolean subStops = null;
        Boolean entrances = null;
        Boolean remarks = null;
        Boolean scheduledDays = null;
        Boolean notOnlyFastRoutes = null;
        Boolean bestprice = null;
        String language = null;
        String loyaltyCard = null;
        Boolean firstClass = null;
        Integer age = null;
        ProfileSpecificProducts products = null;
        Boolean pretty = null;
        InlineResponse2XX3 response = api.journeysGet(from, fromId, fromAddress, fromLatitude, fromLongitude, to, toId, toAddress, toLatitude, toLongitude, departure, arrival, earlierThan, laterThan, results, stopovers, transfers, transferTime, accessibility, bike, startWithWalking, walkingSpeed, tickets, polylines, subStops, entrances, remarks, scheduledDays, notOnlyFastRoutes, bestprice, language, loyaltyCard, firstClass, age, products, pretty);

        // TODO: test validations
    }
    /**
     * Fetches up-to-date realtime data for a journey computed before.
     *
     * Uses [&#x60;hafasClient.refreshJourney()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/refresh-journey.md) to **\&quot;refresh\&quot; a journey, using its &#x60;refreshToken&#x60;**.  The journey will be the same (equal &#x60;from&#x60;, &#x60;to&#x60;, &#x60;via&#x60;, date/time &amp; vehicles used), but you can get up-to-date realtime data, like delays &amp; cancellations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void journeysRefGetTest() {
        String ref = null;
        Boolean stopovers = null;
        Boolean tickets = null;
        Boolean polylines = null;
        Boolean subStops = null;
        Boolean entrances = null;
        Boolean remarks = null;
        Boolean scheduledDays = null;
        Boolean notOnlyFastRoutes = null;
        Boolean bestprice = null;
        String language = null;
        Boolean pretty = null;
        InlineResponse2XX5 response = api.journeysRefGet(ref, stopovers, tickets, polylines, subStops, entrances, remarks, scheduledDays, notOnlyFastRoutes, bestprice, language, pretty);

        // TODO: test validations
    }
    /**
     * Finds stops/stations, POIs and addresses matching a query.
     *
     * Uses [&#x60;hafasClient.locations()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/locations.md) to **find stops/stations, POIs and addresses matching &#x60;query&#x60;**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsGetTest() {
        String query = null;
        Boolean fuzzy = null;
        Integer results = null;
        Boolean stops = null;
        Boolean addresses = null;
        Boolean poi = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.locationsGet(query, fuzzy, results, stops, addresses, poi, linesOfStops, language, pretty);

        // TODO: test validations
    }
    /**
     * Finds stops/stations &amp; POIs close to a geolocation.
     *
     * Uses [&#x60;hafasClient.nearby()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/nearby.md) to **find stops/stations &amp; POIs close to the given geolocation**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsNearbyGetTest() {
        Location location = null;
        Integer results = null;
        Integer distance = null;
        Boolean stops = null;
        Boolean poi = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.locationsNearbyGet(location, results, distance, stops, poi, linesOfStops, language, pretty);

        // TODO: test validations
    }
    /**
     * Fetches arrivals at a stop/station.
     *
     * Works like &#x60;/stops/{id}/departures&#x60;, except that it uses [&#x60;hafasClient.arrivals()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/arrivals.md) to **query arrivals at a stop/station**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopsIdArrivalsGetTest() {
        String id = null;
        OffsetDateTime when = null;
        String direction = null;
        Integer duration = null;
        Integer results = null;
        Boolean linesOfStops = null;
        Boolean remarks = null;
        String language = null;
        ProfileSpecificProducts products = null;
        Boolean pretty = null;
        InlineResponse2XX2 response = api.stopsIdArrivalsGet(id, when, direction, duration, results, linesOfStops, remarks, language, products, pretty);

        // TODO: test validations
    }
    /**
     * Fetches departures at a stop/station.
     *
     * Uses [&#x60;hafasClient.departures()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/departures.md) to **query departures at a stop/station**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopsIdDeparturesGetTest() {
        String id = null;
        OffsetDateTime when = null;
        String direction = null;
        Integer duration = null;
        Integer results = null;
        Boolean linesOfStops = null;
        Boolean remarks = null;
        String language = null;
        ProfileSpecificProducts products = null;
        Boolean pretty = null;
        InlineResponse2XX1 response = api.stopsIdDeparturesGet(id, when, direction, duration, results, linesOfStops, remarks, language, products, pretty);

        // TODO: test validations
    }
    /**
     * Finds a stop/station by ID.
     *
     * Uses [&#x60;hafasClient.stop()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/stop.md) to **find a stop/station by ID**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopsIdGetTest() {
        String id = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        InlineResponse2XX response = api.stopsIdGet(id, linesOfStops, language, pretty);

        // TODO: test validations
    }
    /**
     * Fetches a trip by ID.
     *
     * Uses [&#x60;hafasClient.trip()&#x60;](https://github.com/public-transport/hafas-client/blob/6/docs/trip.md) to **fetch a trip by ID**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsIdGetTest() {
        String id = null;
        Boolean stopovers = null;
        Boolean remarks = null;
        Boolean polyline = null;
        String language = null;
        Boolean pretty = null;
        InlineResponse2XX4 response = api.tripsIdGet(id, stopovers, remarks, polyline, language, pretty);

        // TODO: test validations
    }
}
